// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: games.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
)

const createGame = `-- name: CreateGame :one
INSERT INTO games (title) VALUES ($1)
RETURNING id, title
`

func (q *Queries) CreateGame(ctx context.Context, title string) (Game, error) {
	row := q.db.QueryRow(ctx, createGame, title)
	var i Game
	err := row.Scan(&i.ID, &i.Title)
	return i, err
}

const deleteGameByID = `-- name: DeleteGameByID :exec
DELETE FROM games
WHERE id = $1
`

func (q *Queries) DeleteGameByID(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteGameByID, id)
	return err
}

const getGame = `-- name: GetGame :one
SELECT id, title FROM games
WHERE id = $1
`

func (q *Queries) GetGame(ctx context.Context, id uuid.UUID) (Game, error) {
	row := q.db.QueryRow(ctx, getGame, id)
	var i Game
	err := row.Scan(&i.ID, &i.Title)
	return i, err
}

const listGames = `-- name: ListGames :many
SELECT id, title FROM games
`

func (q *Queries) ListGames(ctx context.Context) ([]Game, error) {
	rows, err := q.db.Query(ctx, listGames)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Game{}
	for rows.Next() {
		var i Game
		if err := rows.Scan(&i.ID, &i.Title); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
